// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
  Others
}

model Union {
  id         Int      @id @default(autoincrement())
  upazillaId Int      @map("upazilla_id")
  nameEn     String   @map("name_en")
  nameBn     String   @map("name_bn")
  url        String?
  upazilla   Upazilla @relation(fields: [upazillaId], references: [id], onDelete: Cascade)

  contacts Contact[]
  @@map("unions")
}

model Upazilla {
  id         Int      @id @default(autoincrement())
  districtId Int      @map("district_id")
  nameEn     String   @map("name_en")
  nameBn     String   @map("name_bn")
  url        String?
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)

  unions   Union[]
  contacts Contact[]
  @@map("upazillas")
}

model District {
  id         Int        @id @default(autoincrement())
  divisionId Int        @map("division_id")
  nameEn     String     @map("name_en")
  nameBn     String     @map("name_bn")
  latitude   String?
  longitute  String?
  url        String?
  division   Division   @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  upazillas  Upazilla[]

  contacts Contact[]
  @@map("districts")
}

model Division {
  id     Int     @id @default(autoincrement())
  nameEn String  @map("name_en")
  nameBn String  @map("name_bn")
  url    String?

  districts District[]
  contacts  Contact[]
  @@map("divisions")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String   @unique @db.VarChar(20)
  email     String   @unique @db.VarChar(100)
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Profession {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  contacts   Contact[]
  speciality Speciality[]
  @@map("professions")
}

model Speciality {
  id           Int        @id @default(autoincrement())
  professionId Int        @map("profession_id")
  name         String
  description  String?
  createdAt    DateTime?  @default(now()) @map("created_at")
  upadedAt     DateTime?  @updatedAt
  profession   Profession @relation(fields: [professionId], references: [id], onDelete: Cascade)

  contacts Contact[]
  @@map("specialities")
}

model Contact {
  id                    Int       @id @default(autoincrement())
  unionId               Int?      @map("union_id")
  upazillaId            Int?      @map("upazilla_id")
  districtId            Int?      @map("district_id")
  divisionId            Int?      @map("division_id")
  firstName             String?   @map("first_name")
  lastName              String?   @map("last_name")
  dateOfBirth           DateTime? @map("date_of_birth") @db.Date
  nid                   String?
  photo                 String?
  address               String?
  mobileNumberPrimary   String?   @map("mobile_number_primary")
  mobileNumberSecondary String?   @map("mobile_number_secondary")
  email                 String?
  gender                Gender?
  /// null indicate contact is enable
  deactivatedAt         DateTime? @map("deactivated_at")
  createdAt             DateTime? @default(now()) @map("created_at")
  updatedAt             DateTime? @updatedAt @map("updated_at")

  professions  Profession[]
  specialities Speciality[]
  union        Union?       @relation(fields: [unionId], references: [id], onDelete: SetNull)
  upazilla     Upazilla?    @relation(fields: [upazillaId], references: [id], onDelete: SetNull)
  district     District?    @relation(fields: [districtId], references: [id], onDelete: SetNull)
  division     Division?    @relation(fields: [divisionId], references: [id], onDelete: SetNull)

  @@map("contacts")
}
